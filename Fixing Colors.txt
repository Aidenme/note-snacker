AVOID TASK ENGINES It’s natural to focus on taming the pile of tasks you’ve already built up. Equally effective containment strategies, however, can be found upstream in your workflow, before obligations are generated in the first place. The following such strategy, for example, can be surprisingly effective in reducing your task burden: When selecting new projects, assess your options by the number of

The technicians

If the text is the same up to "Some highlights have been hidden or truncated due to export limits

if text without truncated text in HTML text we have a match!



for anything in the HTML list that is truncated see if anything in the kindle list is not truncated. Easy enough. Compare truncated only with not truncated

for ltext in HTML list
	if truncated
		for ktext in kindleHighlight
			if lext in ktext
				true (match found)
				if kindle highlight truncated
					true
						pop
					false
						ltext = ktext
						pop
			else
				pop

	if untruncated
		for ktext in kindlhighlight
			if ktext in ltext pop
			else do nothing because this is a new highlight
				 

Book doesn't exist:
get kindle list and localize it
export it
Boom, got my starting book file

If book exists:
get HTML list and localize it
get kindle list and localize it
	getting the kindle list is the whole process in book. If it fails part way you still get the kindle list and localize it

For all highlights in the HTML list search for the same highlight in the kindle list. if any are found, pop them, but if the HTML highlight list is truncated, copy over untruncated text first and then pop it. If it is truncated don't copy it. Just pop it. After the local list completes the search just append whatever remains in the kindle list.

at the very least every highlight that currently exists should be in the local book because that is the first thing done. Even if the program only partially runs and deletes highlights the local list will still be able to fill out any truncated highlights. Complete highlights won't search for any highlights. Once the end of that list gets reached whatever

BOOKFILE
It is an interface. It gets created when a book needs to interface. That is after the highlight list is obtained for the first time.
if bookfile doesn't exist
	create the file based on the highlights obtained
if bookfile does exist update the current file

loop
have the book do a pass over the highlights
update the bookfile
delete the untruncated highlights

updating the bookfile.

importHTMLHighlights
updateLocalHighlights(bookHighlightList)
	updates the already truncated highlights and

Convert book highlights into HTML highlights (which will be the new method for exporting highlights. Compare those, update the html highlight text if it isn't truncated. Append new highlights to the end of the highlight list.
The order will be maintained because any time a highlight doesn't exist it will be inserted into the HTML highlight list. Actually I'm just going to be creating a new highlight list that either takes from the local html highlights or the kindle highlights and appends them. If there aren't any local highlights then just the kindle highlights get appended.


UPDATE DETECTOR
Could check the run count and add some javacript that hides/displays based on run count. I may have to do that because if the thing keeps breaking I can't have it handled automatically. Or at the least it would be hard to do automatically. Think about it like this. The program takes kindle highlights and is using them to fill out the local HTML file. For NOW just get this working entirely with one file. It is easy for you to manually figure out what has already been added and delete it because of how the topics are displayed in SuperMemo.

CSS
Could use Javascript to just change the linked CSS file.
Could use Javascript to change the style of each element.

Export happens
Color checks run on the newly created HTML file. In fact color checker should be a new object that gets a html filepath and does the checks. If the check fails then it changes the HTML to include the visualize_color.css file. It tells you which highlights have the wrong color and asks you to fix it. After you do you tell it you fixed it. It runs again. Repeat until all the color checks are fixed. Note that if a file already exists and new html is getting added to it any previous existing notes need to NOT have the color class change in case the colors are wrong on the kindle site.

INCREMENTS:
I really want to move everything over to an HTMLManger object, but currently the program fails too much. For now I just need to find a way to export and then be able to go in and manually fix the highlights myself. Once that works then I can make that process easier for myself by creating an HTMLManger object that will start doing those processess for me.
1. Add a way to toggle the deletion of highlights on and off so I don't have to do that every time I export. That way I can start doing some tests.
2. Give each element a class that includes the highlight color.

Filemanager manages an individal book's html file so it only needs to exist when the book file exists, but would it be better to have a bookfile object then instead of an entire "filemanager"? In that case "exporting" a book would actually just be the creation of a new bookfile object, which has an associated html file as part of itself.

Disable delete:

checkColors in book.py is the thing that blocks the rest of the program from running if the color check fails.

I think this will all be a lot easier if I just have an "exporter" object that I send a list of highlights to. Then if there are problems with the highlights I can handle them there before the program keeps running.

Keep in mind if you fix the colors later you have to make sure highlights that already exist don't revert the colors back in the "database" book file.

CHECK COLORS BEFORE EXPORT 
If it finds a problem it presents you with the highlight and gives you the option to change the highlight color. The problem with this is all the highlights will have already been deleted so it is hard for me to check.


SET COLORS AFTER EXPORT

JAVASCRIPT
One idea I have is to just add some javascript functionality to change a highlight color and then when I do have the page refresh and redraw the lines. Can you use Javascript to permanently change something about an HTML page? I feel like it shouldn't be able to do that for security reasons.

ANOTHER PROGRAM
I could write a whole other program that checks the highlight colors and rewrites the HTML code to fix any mistakes. That would require the highlight color to be stored somewhere in the HTML code. That shouldn't be too hard though and I can use CSS to make it invisible to my copy/paste to SuperMemo. The Javascript I should add though is the ability to visually turn the highlight color on and off. I'd give each highlight its own div and change the background color. That way it would be easy for me to visually see what needs to be fixed. Also I should give each highlight a number that shows up when I do that. Then when the program runs even if it doesn't detect any errors I can issue a command like "change highlight #42 to yellow." The main drawback to this is I'm not sure how well I can use this with the current system of having the full book stored somewhere. Actually since doing this is going to change how I write out the HTML code the complete books aren't going to be compatible. I'm going to have to change how they work anyway. Maybe highlight checker needs to run before the merger into the main html file. That may be another object or program "merger". This is all better when I think about it anyway because it IS making everything more modular.




