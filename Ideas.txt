THINKING WITH OBJECTS
Before anything can happen with a book it needs to be setup.
Setup:
-Book gets it's soup.
Soup gets processed:
	-Highlight count is determined. Actually the book probably shouldn't be what 	does this because this only exists in order to determine when to stop looking 	for highlights. Can still store it on the book itself for convenience.
	-Initial list of highlights is created.
		setHighlightList

Running the actual program:
-Any highlight errors are detected
	Repeats:
	-Non truncated highlights are deleted off the website. This should for sure
	not be done by the book.
	-Book gets new soup
	-Unlocked highlights are insterted into the book's highlight list
		insertUnlockedHighlights

means the initial highlight list is created.


OTHER THINKING
This might be the first time it actually makes sense to finally create a Book object. When I was just working with one book it was fine because I was just moving in one direction: Functually grab all the highlighted text, output as an html file. Done. Now there a two places I need to get data from. I'm not just going in one direction so it will be helpful to have everything going into one specific place. Also I'm going to be working with multiple books now. That alone is a good hint it is time to make this OOP. This also might be a great time to learn this because I already have most of the functions written. The solution to the problems I'm having might actually be more of a structural problem than anything. The reason it has been so hard to determine what functions I should write exactly is that functions aren't the problem. If you feel like your wheels are spinning and you're not getting anywhere that is because you are stuck and you need to change the strategy.

Highlights of each book get downloaded as html files in the "Exports" folder.

Running the program compares hightlights to highlights it gets from each local book's html file.
	-Only runs if the online book has highlights
	-FUNCTION - Grab local highlights. Returns a local highlight dict
	-FUNCTION - Compare local highlights
	-The delete highlights function might work better if you send it a highlight dict and list of indexes of highlights to delete
	-Comparing each online highlight to each local highlight might take a really long time. This will especially be true the first time this runs. Don't worry about it for now. If stuff breaks then change it. Usually you will only be comparing a few highlights to the local book highlights.

New highlights
	-Any new highlights found are put into the main folder and have the book name so I can easily append them into SuperMemo's books.
	-New highlight data is added to the end of the html file in its book folder. Actually maybe I don't need individaul folder. I can just have the full HTML files in export and add _New_ files to the top of this folder.


FUNCTIONALITY TO SKIP FINISHED BOOKS
It will take a long time to click through every book and wait for it to load. This will waste some time on books I've finished reading and highlighting. To fix this there should be some way to indicate a book is finished. I was thinking there should be some local book list, but the HTML files of all the books for the program to refer to is going to require taking a crack at more in-depth local storage. This is just a feature to keep in mind when I reach that stage of the project.